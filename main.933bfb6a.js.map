{"version":3,"sources":["scripts/main.js"],"names":["board","field","document","querySelector","button","scoreElement","messageStart","messageLose","messageWin","columns","score","filterZero","row","filter","num","compareFields","prevBoard","boards","JSON","stringify","slide","currentRow","i","length","splice","push","hasEmptyCell","r","c","renderField","rows","cells","className","classList","add","textContent","setRandomCell","found","Math","floor","random","transponseField","currentField","transponsedBoard","map","_","colIndex","slideLeft","transponsedField","slideRight","reverse","slideDown","newField","slideUp","winGame","j","checkFields","fieldToCheck","gameOver","boardToCheck","newDesk","addEventListener","contains","remove","e","parse","key"],"mappings":"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","file":"main.933bfb6a.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst field = document.querySelector('.game-field');\nconst button = document.querySelector('.button');\nconst scoreElement = document.querySelector('.game-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nlet board;\nconst columns = 4;\nlet score = 0;\n\nconst filterZero = (row) => {\n  return row.filter(num => num !== 0);\n};\n\nfunction compareFields(prevBoard, boards) {\n  return JSON.stringify(prevBoard) !== JSON.stringify(boards);\n};\n\nfunction slide(row) {\n  const currentRow = filterZero(row);\n\n  for (let i = 0; i < currentRow.length - 1; i++) {\n    if (currentRow[i] === currentRow[i + 1]) {\n      currentRow[i] *= 2;\n      currentRow.splice(i + 1, 1);\n      score += currentRow[i];\n    }\n  }\n\n  while (currentRow.length < columns) {\n    currentRow.push(0);\n  }\n\n  return currentRow;\n};\n\nconst hasEmptyCell = () => {\n  for (let r = 0; r < columns; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nfunction renderField() {\n  for (let r = 0; r < columns; r++) {\n    for (let c = 0; c < columns; c++) {\n      field.rows[r].cells[c].className = '';\n\n      field.rows[r].cells[c].classList.add(\n        'field-cell',\n        `field-cell--${board[r][c]}`\n      );\n      field.rows[r].cells[c].textContent = board[r][c] || '';\n    }\n  }\n};\n\nfunction setRandomCell() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * columns);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = 2;\n      renderField();\n\n      found = true;\n    }\n  }\n};\n\nconst transponseField = (currentField) => {\n  let transponsedBoard = currentField;\n\n  transponsedBoard = transponsedBoard[0].map(\n    (_, colIndex) => transponsedBoard.map(\n      row => row[colIndex]\n    )\n  );\n\n  return transponsedBoard;\n};\n\nfunction slideLeft(transponsedField = board) {\n  for (let r = 0; r < columns; r++) {\n    let row = transponsedField[r];\n\n    row = slide(row);\n    transponsedField[r] = row;\n  };\n};\n\nfunction slideRight(transponsedField = board) {\n  for (let r = 0; r < columns; r++) {\n    let row = transponsedField[r].reverse();\n\n    row = slide(row);\n    transponsedField[r] = row.reverse();\n  };\n};\n\nfunction slideDown() {\n  const newField = transponseField(board);\n\n  slideRight(newField);\n\n  board = transponseField(newField);\n};\n\nfunction slideUp() {\n  const newField = transponseField(board);\n\n  slideLeft(newField);\n\n  board = transponseField(newField);\n};\n\nconst winGame = () => {\n  for (let i = 0; i < board[0].length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n};\n\nconst checkFields = (fieldToCheck) => {\n  for (let i = 0; i < columns; i++) {\n    for (let j = 0; j < columns - 1; j++) {\n      if (fieldToCheck[i][j] === fieldToCheck[i][j + 1]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst gameOver = (boardToCheck) => {\n  if (hasEmptyCell()) {\n    return false;\n  }\n\n  const newDesk = transponseField(boardToCheck);\n\n  if (checkFields(newDesk) || checkFields(boardToCheck)) {\n    return false;\n  };\n\n  return true;\n};\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  };\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  scoreElement.textContent = score;\n\n  setRandomCell();\n  setRandomCell();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (gameOver(board)) {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (winGame()) {\n    messageWin.classList.remove('hidden');\n\n    renderField();\n  } else {\n    const prevBoard = JSON.parse(JSON.stringify(board));\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        slideLeft();\n        break;\n\n      case 'ArrowRight':\n        slideRight();\n        break;\n\n      case 'ArrowDown':\n        slideDown();\n        break;\n\n      case 'ArrowUp':\n        slideUp();\n        break;\n    }\n\n    if (compareFields(prevBoard, board)) {\n      setRandomCell();\n    }\n\n    renderField();\n  }\n\n  scoreElement.textContent = score;\n});\n"]}